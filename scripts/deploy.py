import os
import asyncio
import time
import json
from web3 import Web3
from solcx import compile_standard, install_solc
from colorama import init, Fore, Style

# Kh·ªüi t·∫°o colorama
init(autoreset=True)

# C√†i ƒë·∫∑t phi√™n b·∫£n solc
install_solc('0.8.0')

# Constants
RPC_URL = "https://testnet-rpc.monad.xyz"
EXPLORER_URL = "https://testnet.monadexplorer.com/tx/0x"  # Th√™m khai b√°o bi·∫øn EXPLORER_URL

# Source code c·ªßa contract
CONTRACT_SOURCE = """
pragma solidity ^0.8.0;

contract Counter {
    uint256 private count;
    
    event CountIncremented(uint256 newCount);
    
    function increment() public {
        count += 1;
        emit CountIncremented(count);
    }
    
    function getCount() public view returns (uint256) {
        return count;
    }
}
"""

# H√†m ƒë·ªçc nhi·ªÅu private key t·ª´ pvkey.txt
def load_private_keys(file_path):
    try:
        with open(file_path, 'r') as file:
            keys = [line.strip() for line in file.readlines() if line.strip()]
            if not keys:
                raise ValueError("File pvkey.txt r·ªóng")
            return keys
    except FileNotFoundError:
        print(f"{Fore.RED}‚ùå Kh√¥ng t√¨m th·∫•y file pvkey.txt{Style.RESET_ALL}")
        return None
    except Exception as e:
        print(f"{Fore.RED}‚ùå L·ªói ƒë·ªçc file pvkey.txt: {str(e)}{Style.RESET_ALL}")
        return None

# Kh·ªüi t·∫°o web3 provider
w3 = Web3(Web3.HTTPProvider(RPC_URL))

# Ki·ªÉm tra k·∫øt n·ªëi
if not w3.is_connected():
    print(f"{Fore.RED}‚ùå Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c v·ªõi RPC{Style.RESET_ALL}")
    exit(1)

# H√†m hi·ªÉn th·ªã vi·ªÅn ƒë·∫πp m·∫Øt
def print_border(text, color=Fore.MAGENTA, width=60):
    print(f"{color}‚ïî{'‚ïê' * (width - 2)}‚ïó{Style.RESET_ALL}")
    print(f"{color}‚ïë {text:^56} ‚ïë{Style.RESET_ALL}")
    print(f"{color}‚ïö{'‚ïê' * (width - 2)}‚ïù{Style.RESET_ALL}")

# H√†m hi·ªÉn th·ªã b∆∞·ªõc
def print_step(step, message, lang):
    steps = {
        'vi': {'compile': 'Bi√™n d·ªãch', 'deploy': 'Tri·ªÉn khai'},
        'en': {'compile': 'Compiling', 'deploy': 'Deploying'}
    }
    step_text = steps[lang][step]
    print(f"{Fore.YELLOW}üî∏ {Fore.CYAN}{step_text:<15}{Style.RESET_ALL} | {message}")

# H√†m bi√™n d·ªãch contract
def compile_contract(language):
    lang = {
        'vi': {'start': 'ƒêang bi√™n d·ªãch contract...', 'success': 'Bi√™n d·ªãch contract th√†nh c√¥ng!'},
        'en': {'start': 'Compiling contract...', 'success': 'Contract compiled successfully!'}
    }[language]

    print_step('compile', lang['start'], language)
    try:
        input_data = {
            "language": "Solidity",
            "sources": {"Counter.sol": {"content": CONTRACT_SOURCE}},
            "settings": {"outputSelection": {"*": {"*": ["abi", "evm.bytecode"]}}}
        }
        compiled_sol = compile_standard(input_data, solc_version="0.8.0")
        contract = compiled_sol['contracts']['Counter.sol']['Counter']
        print_step('compile', f"{Fore.GREEN}‚úî {lang['success']}{Style.RESET_ALL}", language)
        return {'abi': contract['abi'], 'bytecode': contract['evm']['bytecode']['object']}
    except Exception as e:
        print_step('compile', f"{Fore.RED}‚úò Th·∫•t b·∫°i / Failed: {str(e)}{Style.RESET_ALL}", language)
        raise

# H√†m deploy contract
async def deploy_contract(private_key, token_name, token_symbol, language):
    try:
        account = w3.eth.account.from_key(private_key)
        wallet = account.address[:8] + "..."
        lang = {
            'vi': {'start': f'ƒêang tri·ªÉn khai contract {token_name} ({token_symbol})', 'send': 'ƒêang g·ª≠i giao d·ªãch...', 'success': f'Contract {token_name} tri·ªÉn khai th√†nh c√¥ng!'},
            'en': {'start': f'Deploying contract {token_name} ({token_symbol})', 'send': 'Sending transaction...', 'success': f'Contract {token_name} deployed successfully!'}
        }[language]

        print_border(f"{lang['start']} | {wallet}", Fore.MAGENTA)
        
        compiled = compile_contract(language)
        abi = compiled['abi']
        bytecode = compiled['bytecode']

        nonce = w3.eth.get_transaction_count(account.address)
        print_step('deploy', f"Nonce: {Fore.CYAN}{nonce}{Style.RESET_ALL}", language)

        contract = w3.eth.contract(abi=abi, bytecode=bytecode)
        tx = contract.constructor().build_transaction({
            'from': account.address,
            'gas': 2000000,
            'gasPrice': w3.eth.gas_price,
            'nonce': nonce,
        })

        print_step('deploy', lang['send'], language)
        signed_tx = w3.eth.account.sign_transaction(tx, private_key)
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        
        print_step('deploy', f"Tx Hash: {Fore.YELLOW}{EXPLORER_URL}{tx_hash.hex()}{Style.RESET_ALL}", language)
        await asyncio.sleep(2)
        receipt = w3.eth.wait_for_transaction_receipt(tx_hash, timeout=180)
        
        if receipt.status == 1:
            print_step('deploy', f"{Fore.GREEN}‚úî {lang['success']}{Style.RESET_ALL}", language)
            print(f"{Fore.CYAN}üìå ƒê·ªãa ch·ªâ contract / Contract Address: {Fore.YELLOW}{receipt.contractAddress}{Style.RESET_ALL}")
            return receipt.contractAddress
        else:
            raise Exception(f"Giao d·ªãch th·∫•t b·∫°i: Status {receipt.status}, Data: {w3.to_hex(receipt.get('data', b''))}")
    except Exception as e:
        print_step('deploy', f"{Fore.RED}‚úò Th·∫•t b·∫°i / Failed: {str(e)}{Style.RESET_ALL}", language)
        return None

# Ch·∫°y v√≤ng l·∫∑p deploy cho t·ª´ng private key
async def run_deploy_cycle(cycles, private_keys, language):
    lang = {
        'vi': "V√íNG L·∫∂P DEPLOY CONTRACT / CONTRACT DEPLOY CYCLE",
        'en': "CONTRACT DEPLOY CYCLE"
    }[language]

    for account_idx, private_key in enumerate(private_keys, 1):
        wallet = w3.eth.account.from_key(private_key).address[:8] + "..."
        print_border(f"üè¶ T√ÄI KHO·∫¢N / ACCOUNT {account_idx}/{len(private_keys)} | {wallet}", Fore.BLUE)

        for i in range(cycles):
            print_border(f"üîÑ {lang} {i + 1}/{cycles} | {wallet}", Fore.CYAN)
            
            token_name = input(f"{Fore.GREEN}‚û§ {'Nh·∫≠p t√™n token (VD: Thog Token): ' if language == 'vi' else 'Enter the token name (e.g., Thog Token): '}{Style.RESET_ALL}")
            token_symbol = input(f"{Fore.GREEN}‚û§ {'Nh·∫≠p k√Ω hi·ªáu token (VD: THOG): ' if language == 'vi' else 'Enter the token symbol (e.g., THOG): '}{Style.RESET_ALL}")
            
            if not token_name or not token_symbol:
                print(f"{Fore.RED}‚ùå T√™n ho·∫∑c k√Ω hi·ªáu token kh√¥ng h·ª£p l·ªá!{Style.RESET_ALL}")
                continue

            await deploy_contract(private_key, token_name, token_symbol, language)
            
            if i < cycles - 1:
                delay = random.randint(4, 6)  # Delay 4-6 gi√¢y nh∆∞ trong JS
                print(f"\n{Fore.YELLOW}‚è≥ {'ƒê·ª£i' if language == 'vi' else 'Waiting'} {delay} {'gi√¢y tr∆∞·ªõc v√≤ng ti·∫øp theo...' if language == 'vi' else 'seconds before next cycle...'}{Style.RESET_ALL}")
                await asyncio.sleep(delay)

        if account_idx < len(private_keys):
            delay = random.randint(4, 6)
            print(f"\n{Fore.YELLOW}‚è≥ {'ƒê·ª£i' if language == 'vi' else 'Waiting'} {delay} {'gi√¢y tr∆∞·ªõc t√†i kho·∫£n ti·∫øp theo...' if language == 'vi' else 'seconds before next account...'}{Style.RESET_ALL}")
            await asyncio.sleep(delay)

    print(f"{Fore.GREEN}{'‚ïê' * 60}{Style.RESET_ALL}")
    print(f"{Fore.GREEN}‚îÇ {'HO√ÄN T·∫§T' if language == 'vi' else 'ALL DONE'}: {cycles} {'V√íNG L·∫∂P CHO' if language == 'vi' else 'CYCLES FOR'} {len(private_keys)} {'T√ÄI KHO·∫¢N' if language == 'vi' else 'ACCOUNTS'}{' ' * (32 - len(str(cycles)) - len(str(len(private_keys))))}‚îÇ{Style.RESET_ALL}")
    print(f"{Fore.GREEN}{'‚ïê' * 60}{Style.RESET_ALL}")

# H√†m ch√≠nh
async def run(language):
    print(f"{Fore.GREEN}{'‚ïê' * 60}{Style.RESET_ALL}")
    print(f"{Fore.GREEN}‚îÇ {'DEPLOY CONTRACT - MONAD TESTNET':^56} ‚îÇ{Style.RESET_ALL}")
    print(f"{Fore.GREEN}{'‚ïê' * 60}{Style.RESET_ALL}")

    private_keys = load_private_keys('pvkey.txt')
    if not private_keys:
        return

    print(f"{Fore.CYAN}üë• {'T√†i kho·∫£n' if language == 'vi' else 'Accounts'}: {len(private_keys)}{Style.RESET_ALL}")

    while True:
        try:
            print_border("üî¢ S·ªê V√íNG L·∫∂P / NUMBER OF CYCLES", Fore.YELLOW)
            cycles_input = input(f"{Fore.GREEN}‚û§ {'Nh·∫≠p s·ªë (m·∫∑c ƒë·ªãnh 5): ' if language == 'vi' else 'Enter number (default 5): '}{Style.RESET_ALL}")
            cycles = int(cycles_input) if cycles_input.strip() else 5
            if cycles <= 0:
                raise ValueError
            break
        except ValueError:
            print(f"{Fore.RED}‚ùå {'Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá!' if language == 'vi' else 'Please enter a valid number!'}{Style.RESET_ALL}")

    start_msg = f"Ch·∫°y {cycles} v√≤ng deploy contract cho {len(private_keys)} t√†i kho·∫£n..." if language == 'vi' else f"Running {cycles} contract deploy cycles for {len(private_keys)} accounts..."
    print(f"{Fore.YELLOW}üöÄ {start_msg}{Style.RESET_ALL}")
    await run_deploy_cycle(cycles, private_keys, language)

if __name__ == "__main__":
    asyncio.run(run('vi'))
